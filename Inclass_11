#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Comparison function for the priority queue
struct Compare {
    bool operator()(const Edge& e1, const Edge& e2) {
        return e1.weight > e2.weight;
    }
};

class Graph {
    int V; // Number of vertices
    vector<vector<int>> adjMatrix;

public:
    Graph(int vertices) {
        V = vertices;
        adjMatrix.resize(V, vector<int>(V, 0));
    }

    void addEdge(int src, int dest, int weight) {
        adjMatrix[src][dest] = weight;
        adjMatrix[dest][src] = weight;
    }

    void printMST(const vector<Edge>& mst) {
        cout << "Edge \tWeight\n";
        for (const auto& edge : mst) {
            cout << edge.src << " - " << edge.dest << "\t" << edge.weight << "\n";
        }
    }

    vector<Edge> primMST(int startNode) {
        vector<Edge> mst;
        vector<int> key(V, INT_MAX);
        vector<bool> mstSet(V, false);
        vector<int> parent(V, -1);

        // Priority queue (min-heap) to store edges based on weight
        priority_queue<Edge, vector<Edge>, Compare> pq;

        key[startNode] = 0;
        pq.push({startNode, startNode, 0});

        while (!pq.empty()) {
            int u = pq.top().dest;
            pq.pop();

            mstSet[u] = true;

            for (int v = 0; v < V; ++v) {
                if (adjMatrix[u][v] && !mstSet[v] && adjMatrix[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = adjMatrix[u][v];
                    pq.push({u, v, adjMatrix[u][v]});
                }
            }
        }

        for (int v = 1; v < V; ++v) {
            mst.push_back({parent[v], v, adjMatrix[v][parent[v]]});
        }

        return mst;
    }
};

int main() {
    int V = 6; // Number of vertices in the graph
    Graph g(V);

    // Add edges and weights to the graph
    g.addEdge(0, 1, 3);
    g.addEdge(1, 2, 2);
    g.addEdge(1, 4, 10);
    g.addEdge(0, 5, 1);
    g.addEdge(3, 1, 1);
    g.addEdge(2, 5, 5);
    g.addEdge(2, 3, 3);
    g.addEdge(3, 4, 5);
    g.addEdge(4, 5, 4);

    int startNode = 0;
    vector<Edge> mst = g.primMST(startNode);
    g.printMST(mst);

    return 0;
}
